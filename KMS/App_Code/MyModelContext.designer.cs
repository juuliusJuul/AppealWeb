#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="hjweb_dk_db")]
public partial class MyModelContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertaspnet_Application(aspnet_Application instance);
  partial void Updateaspnet_Application(aspnet_Application instance);
  partial void Deleteaspnet_Application(aspnet_Application instance);
  partial void Insertaspnet_Membership(aspnet_Membership instance);
  partial void Updateaspnet_Membership(aspnet_Membership instance);
  partial void Deleteaspnet_Membership(aspnet_Membership instance);
  partial void Insertaspnet_Role(aspnet_Role instance);
  partial void Updateaspnet_Role(aspnet_Role instance);
  partial void Deleteaspnet_Role(aspnet_Role instance);
  partial void Insertaspnet_SchemaVersion(aspnet_SchemaVersion instance);
  partial void Updateaspnet_SchemaVersion(aspnet_SchemaVersion instance);
  partial void Deleteaspnet_SchemaVersion(aspnet_SchemaVersion instance);
  partial void Insertaspnet_User(aspnet_User instance);
  partial void Updateaspnet_User(aspnet_User instance);
  partial void Deleteaspnet_User(aspnet_User instance);
  partial void Insertaspnet_UsersInRole(aspnet_UsersInRole instance);
  partial void Updateaspnet_UsersInRole(aspnet_UsersInRole instance);
  partial void Deleteaspnet_UsersInRole(aspnet_UsersInRole instance);
  partial void InserttblCategory(tblCategory instance);
  partial void UpdatetblCategory(tblCategory instance);
  partial void DeletetblCategory(tblCategory instance);
  partial void InserttblCourt(tblCourt instance);
  partial void UpdatetblCourt(tblCourt instance);
  partial void DeletetblCourt(tblCourt instance);
  partial void InserttblDocSearch(tblDocSearch instance);
  partial void UpdatetblDocSearch(tblDocSearch instance);
  partial void DeletetblDocSearch(tblDocSearch instance);
  partial void InserttblDocument(tblDocument instance);
  partial void UpdatetblDocument(tblDocument instance);
  partial void DeletetblDocument(tblDocument instance);
  partial void InserttblLaw(tblLaw instance);
  partial void UpdatetblLaw(tblLaw instance);
  partial void DeletetblLaw(tblLaw instance);
  partial void InserttblLawDoc(tblLawDoc instance);
  partial void UpdatetblLawDoc(tblLawDoc instance);
  partial void DeletetblLawDoc(tblLawDoc instance);
  partial void InserttblPerson(tblPerson instance);
  partial void UpdatetblPerson(tblPerson instance);
  partial void DeletetblPerson(tblPerson instance);
  partial void InserttblSearchWord(tblSearchWord instance);
  partial void UpdatetblSearchWord(tblSearchWord instance);
  partial void DeletetblSearchWord(tblSearchWord instance);
  partial void InserttblSubCategory(tblSubCategory instance);
  partial void UpdatetblSubCategory(tblSubCategory instance);
  partial void DeletetblSubCategory(tblSubCategory instance);
  partial void InserttblSubLaw(tblSubLaw instance);
  partial void UpdatetblSubLaw(tblSubLaw instance);
  partial void DeletetblSubLaw(tblSubLaw instance);
  partial void InserttblUpload(tblUpload instance);
  partial void UpdatetblUpload(tblUpload instance);
  partial void DeletetblUpload(tblUpload instance);
  partial void InserttblUploadDocument(tblUploadDocument instance);
  partial void UpdatetblUploadDocument(tblUploadDocument instance);
  partial void DeletetblUploadDocument(tblUploadDocument instance);
  partial void InserttblYear(tblYear instance);
  partial void UpdatetblYear(tblYear instance);
  partial void DeletetblYear(tblYear instance);
  #endregion
	
	public MyModelContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["hjweb_dk_dbConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public MyModelContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MyModelContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MyModelContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MyModelContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<aspnet_Application> aspnet_Applications
	{
		get
		{
			return this.GetTable<aspnet_Application>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
	{
		get
		{
			return this.GetTable<aspnet_Membership>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_Role> aspnet_Roles
	{
		get
		{
			return this.GetTable<aspnet_Role>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_SchemaVersion> aspnet_SchemaVersions
	{
		get
		{
			return this.GetTable<aspnet_SchemaVersion>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_User> aspnet_Users
	{
		get
		{
			return this.GetTable<aspnet_User>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_UsersInRole> aspnet_UsersInRoles
	{
		get
		{
			return this.GetTable<aspnet_UsersInRole>();
		}
	}
	
	public System.Data.Linq.Table<tblCategory> tblCategories
	{
		get
		{
			return this.GetTable<tblCategory>();
		}
	}
	
	public System.Data.Linq.Table<tblCourt> tblCourts
	{
		get
		{
			return this.GetTable<tblCourt>();
		}
	}
	
	public System.Data.Linq.Table<tblDocSearch> tblDocSearches
	{
		get
		{
			return this.GetTable<tblDocSearch>();
		}
	}
	
	public System.Data.Linq.Table<tblDocument> tblDocuments
	{
		get
		{
			return this.GetTable<tblDocument>();
		}
	}
	
	public System.Data.Linq.Table<tblLaw> tblLaws
	{
		get
		{
			return this.GetTable<tblLaw>();
		}
	}
	
	public System.Data.Linq.Table<tblLawDoc> tblLawDocs
	{
		get
		{
			return this.GetTable<tblLawDoc>();
		}
	}
	
	public System.Data.Linq.Table<tblPerson> tblPersons
	{
		get
		{
			return this.GetTable<tblPerson>();
		}
	}
	
	public System.Data.Linq.Table<tblSearchWord> tblSearchWords
	{
		get
		{
			return this.GetTable<tblSearchWord>();
		}
	}
	
	public System.Data.Linq.Table<tblSubCategory> tblSubCategories
	{
		get
		{
			return this.GetTable<tblSubCategory>();
		}
	}
	
	public System.Data.Linq.Table<tblSubLaw> tblSubLaws
	{
		get
		{
			return this.GetTable<tblSubLaw>();
		}
	}
	
	public System.Data.Linq.Table<tblUpload> tblUploads
	{
		get
		{
			return this.GetTable<tblUpload>();
		}
	}
	
	public System.Data.Linq.Table<tblUploadDocument> tblUploadDocuments
	{
		get
		{
			return this.GetTable<tblUploadDocument>();
		}
	}
	
	public System.Data.Linq.Table<tblYear> tblYears
	{
		get
		{
			return this.GetTable<tblYear>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Applications")]
public partial class aspnet_Application : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ApplicationName;
	
	private string _LoweredApplicationName;
	
	private System.Guid _ApplicationId;
	
	private string _Description;
	
	private EntitySet<aspnet_Membership> _aspnet_Memberships;
	
	private EntitySet<aspnet_Role> _aspnet_Roles;
	
	private EntitySet<aspnet_User> _aspnet_Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnLoweredApplicationNameChanging(string value);
    partial void OnLoweredApplicationNameChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public aspnet_Application()
	{
		this._aspnet_Memberships = new EntitySet<aspnet_Membership>(new Action<aspnet_Membership>(this.attach_aspnet_Memberships), new Action<aspnet_Membership>(this.detach_aspnet_Memberships));
		this._aspnet_Roles = new EntitySet<aspnet_Role>(new Action<aspnet_Role>(this.attach_aspnet_Roles), new Action<aspnet_Role>(this.detach_aspnet_Roles));
		this._aspnet_Users = new EntitySet<aspnet_User>(new Action<aspnet_User>(this.attach_aspnet_Users), new Action<aspnet_User>(this.detach_aspnet_Users));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string ApplicationName
	{
		get
		{
			return this._ApplicationName;
		}
		set
		{
			if ((this._ApplicationName != value))
			{
				this.OnApplicationNameChanging(value);
				this.SendPropertyChanging();
				this._ApplicationName = value;
				this.SendPropertyChanged("ApplicationName");
				this.OnApplicationNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string LoweredApplicationName
	{
		get
		{
			return this._LoweredApplicationName;
		}
		set
		{
			if ((this._LoweredApplicationName != value))
			{
				this.OnLoweredApplicationNameChanging(value);
				this.SendPropertyChanging();
				this._LoweredApplicationName = value;
				this.SendPropertyChanged("LoweredApplicationName");
				this.OnLoweredApplicationNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Memberships", ThisKey="ApplicationId", OtherKey="ApplicationId")]
	public EntitySet<aspnet_Membership> aspnet_Memberships
	{
		get
		{
			return this._aspnet_Memberships;
		}
		set
		{
			this._aspnet_Memberships.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Roles", ThisKey="ApplicationId", OtherKey="ApplicationId")]
	public EntitySet<aspnet_Role> aspnet_Roles
	{
		get
		{
			return this._aspnet_Roles;
		}
		set
		{
			this._aspnet_Roles.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Users", ThisKey="ApplicationId", OtherKey="ApplicationId")]
	public EntitySet<aspnet_User> aspnet_Users
	{
		get
		{
			return this._aspnet_Users;
		}
		set
		{
			this._aspnet_Users.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_aspnet_Memberships(aspnet_Membership entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = this;
	}
	
	private void detach_aspnet_Memberships(aspnet_Membership entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = null;
	}
	
	private void attach_aspnet_Roles(aspnet_Role entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = this;
	}
	
	private void detach_aspnet_Roles(aspnet_Role entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = null;
	}
	
	private void attach_aspnet_Users(aspnet_User entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = this;
	}
	
	private void detach_aspnet_Users(aspnet_User entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Membership")]
public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ApplicationId;
	
	private System.Guid _UserId;
	
	private string _Password;
	
	private int _PasswordFormat;
	
	private string _PasswordSalt;
	
	private string _MobilePIN;
	
	private string _Email;
	
	private string _LoweredEmail;
	
	private string _PasswordQuestion;
	
	private string _PasswordAnswer;
	
	private bool _IsApproved;
	
	private bool _IsLockedOut;
	
	private System.DateTime _CreateDate;
	
	private System.DateTime _LastLoginDate;
	
	private System.DateTime _LastPasswordChangedDate;
	
	private System.DateTime _LastLockoutDate;
	
	private int _FailedPasswordAttemptCount;
	
	private System.DateTime _FailedPasswordAttemptWindowStart;
	
	private int _FailedPasswordAnswerAttemptCount;
	
	private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
	
	private string _Comment;
	
	private EntityRef<aspnet_Application> _aspnet_Application;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
	
	public aspnet_Membership()
	{
		this._aspnet_Application = default(EntityRef<aspnet_Application>);
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				if (this._aspnet_Application.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFormat", DbType="Int NOT NULL")]
	public int PasswordFormat
	{
		get
		{
			return this._PasswordFormat;
		}
		set
		{
			if ((this._PasswordFormat != value))
			{
				this.OnPasswordFormatChanging(value);
				this.SendPropertyChanging();
				this._PasswordFormat = value;
				this.SendPropertyChanged("PasswordFormat");
				this.OnPasswordFormatChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string PasswordSalt
	{
		get
		{
			return this._PasswordSalt;
		}
		set
		{
			if ((this._PasswordSalt != value))
			{
				this.OnPasswordSaltChanging(value);
				this.SendPropertyChanging();
				this._PasswordSalt = value;
				this.SendPropertyChanged("PasswordSalt");
				this.OnPasswordSaltChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePIN", DbType="NVarChar(16)")]
	public string MobilePIN
	{
		get
		{
			return this._MobilePIN;
		}
		set
		{
			if ((this._MobilePIN != value))
			{
				this.OnMobilePINChanging(value);
				this.SendPropertyChanging();
				this._MobilePIN = value;
				this.SendPropertyChanged("MobilePIN");
				this.OnMobilePINChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredEmail", DbType="NVarChar(256)")]
	public string LoweredEmail
	{
		get
		{
			return this._LoweredEmail;
		}
		set
		{
			if ((this._LoweredEmail != value))
			{
				this.OnLoweredEmailChanging(value);
				this.SendPropertyChanging();
				this._LoweredEmail = value;
				this.SendPropertyChanged("LoweredEmail");
				this.OnLoweredEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
	public string PasswordQuestion
	{
		get
		{
			return this._PasswordQuestion;
		}
		set
		{
			if ((this._PasswordQuestion != value))
			{
				this.OnPasswordQuestionChanging(value);
				this.SendPropertyChanging();
				this._PasswordQuestion = value;
				this.SendPropertyChanged("PasswordQuestion");
				this.OnPasswordQuestionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
	public string PasswordAnswer
	{
		get
		{
			return this._PasswordAnswer;
		}
		set
		{
			if ((this._PasswordAnswer != value))
			{
				this.OnPasswordAnswerChanging(value);
				this.SendPropertyChanging();
				this._PasswordAnswer = value;
				this.SendPropertyChanged("PasswordAnswer");
				this.OnPasswordAnswerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
	public bool IsApproved
	{
		get
		{
			return this._IsApproved;
		}
		set
		{
			if ((this._IsApproved != value))
			{
				this.OnIsApprovedChanging(value);
				this.SendPropertyChanging();
				this._IsApproved = value;
				this.SendPropertyChanged("IsApproved");
				this.OnIsApprovedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
	public bool IsLockedOut
	{
		get
		{
			return this._IsLockedOut;
		}
		set
		{
			if ((this._IsLockedOut != value))
			{
				this.OnIsLockedOutChanging(value);
				this.SendPropertyChanging();
				this._IsLockedOut = value;
				this.SendPropertyChanged("IsLockedOut");
				this.OnIsLockedOutChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
	public System.DateTime CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastLoginDate
	{
		get
		{
			return this._LastLoginDate;
		}
		set
		{
			if ((this._LastLoginDate != value))
			{
				this.OnLastLoginDateChanging(value);
				this.SendPropertyChanging();
				this._LastLoginDate = value;
				this.SendPropertyChanged("LastLoginDate");
				this.OnLastLoginDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastPasswordChangedDate
	{
		get
		{
			return this._LastPasswordChangedDate;
		}
		set
		{
			if ((this._LastPasswordChangedDate != value))
			{
				this.OnLastPasswordChangedDateChanging(value);
				this.SendPropertyChanging();
				this._LastPasswordChangedDate = value;
				this.SendPropertyChanged("LastPasswordChangedDate");
				this.OnLastPasswordChangedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastLockoutDate
	{
		get
		{
			return this._LastLockoutDate;
		}
		set
		{
			if ((this._LastLockoutDate != value))
			{
				this.OnLastLockoutDateChanging(value);
				this.SendPropertyChanging();
				this._LastLockoutDate = value;
				this.SendPropertyChanged("LastLockoutDate");
				this.OnLastLockoutDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
	public int FailedPasswordAttemptCount
	{
		get
		{
			return this._FailedPasswordAttemptCount;
		}
		set
		{
			if ((this._FailedPasswordAttemptCount != value))
			{
				this.OnFailedPasswordAttemptCountChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAttemptCount = value;
				this.SendPropertyChanged("FailedPasswordAttemptCount");
				this.OnFailedPasswordAttemptCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
	public System.DateTime FailedPasswordAttemptWindowStart
	{
		get
		{
			return this._FailedPasswordAttemptWindowStart;
		}
		set
		{
			if ((this._FailedPasswordAttemptWindowStart != value))
			{
				this.OnFailedPasswordAttemptWindowStartChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAttemptWindowStart = value;
				this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
				this.OnFailedPasswordAttemptWindowStartChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
	public int FailedPasswordAnswerAttemptCount
	{
		get
		{
			return this._FailedPasswordAnswerAttemptCount;
		}
		set
		{
			if ((this._FailedPasswordAnswerAttemptCount != value))
			{
				this.OnFailedPasswordAnswerAttemptCountChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAnswerAttemptCount = value;
				this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
				this.OnFailedPasswordAnswerAttemptCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
	public System.DateTime FailedPasswordAnswerAttemptWindowStart
	{
		get
		{
			return this._FailedPasswordAnswerAttemptWindowStart;
		}
		set
		{
			if ((this._FailedPasswordAnswerAttemptWindowStart != value))
			{
				this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAnswerAttemptWindowStart = value;
				this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
				this.OnFailedPasswordAnswerAttemptWindowStartChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Comment
	{
		get
		{
			return this._Comment;
		}
		set
		{
			if ((this._Comment != value))
			{
				this.OnCommentChanging(value);
				this.SendPropertyChanging();
				this._Comment = value;
				this.SendPropertyChanged("Comment");
				this.OnCommentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
	public aspnet_Application aspnet_Application
	{
		get
		{
			return this._aspnet_Application.Entity;
		}
		set
		{
			aspnet_Application previousValue = this._aspnet_Application.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Application.Entity = null;
					previousValue.aspnet_Memberships.Remove(this);
				}
				this._aspnet_Application.Entity = value;
				if ((value != null))
				{
					value.aspnet_Memberships.Add(this);
					this._ApplicationId = value.ApplicationId;
				}
				else
				{
					this._ApplicationId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_Application");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.aspnet_Membership = null;
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.aspnet_Membership = this;
					this._UserId = value.UserId;
				}
				else
				{
					this._UserId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Roles")]
public partial class aspnet_Role : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ApplicationId;
	
	private System.Guid _RoleId;
	
	private string _RoleName;
	
	private string _LoweredRoleName;
	
	private string _Description;
	
	private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
	
	private EntityRef<aspnet_Application> _aspnet_Application;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnLoweredRoleNameChanging(string value);
    partial void OnLoweredRoleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public aspnet_Role()
	{
		this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
		this._aspnet_Application = default(EntityRef<aspnet_Application>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				if (this._aspnet_Application.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid RoleId
	{
		get
		{
			return this._RoleId;
		}
		set
		{
			if ((this._RoleId != value))
			{
				this.OnRoleIdChanging(value);
				this.SendPropertyChanging();
				this._RoleId = value;
				this.SendPropertyChanged("RoleId");
				this.OnRoleIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string RoleName
	{
		get
		{
			return this._RoleName;
		}
		set
		{
			if ((this._RoleName != value))
			{
				this.OnRoleNameChanging(value);
				this.SendPropertyChanging();
				this._RoleName = value;
				this.SendPropertyChanged("RoleName");
				this.OnRoleNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string LoweredRoleName
	{
		get
		{
			return this._LoweredRoleName;
		}
		set
		{
			if ((this._LoweredRoleName != value))
			{
				this.OnLoweredRoleNameChanging(value);
				this.SendPropertyChanging();
				this._LoweredRoleName = value;
				this.SendPropertyChanged("LoweredRoleName");
				this.OnLoweredRoleNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
	public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
	{
		get
		{
			return this._aspnet_UsersInRoles;
		}
		set
		{
			this._aspnet_UsersInRoles.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
	public aspnet_Application aspnet_Application
	{
		get
		{
			return this._aspnet_Application.Entity;
		}
		set
		{
			aspnet_Application previousValue = this._aspnet_Application.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Application.Entity = null;
					previousValue.aspnet_Roles.Remove(this);
				}
				this._aspnet_Application.Entity = value;
				if ((value != null))
				{
					value.aspnet_Roles.Add(this);
					this._ApplicationId = value.ApplicationId;
				}
				else
				{
					this._ApplicationId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_Application");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Role = this;
	}
	
	private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Role = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_SchemaVersions")]
public partial class aspnet_SchemaVersion : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Feature;
	
	private string _CompatibleSchemaVersion;
	
	private bool _IsCurrentVersion;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeatureChanging(string value);
    partial void OnFeatureChanged();
    partial void OnCompatibleSchemaVersionChanging(string value);
    partial void OnCompatibleSchemaVersionChanged();
    partial void OnIsCurrentVersionChanging(bool value);
    partial void OnIsCurrentVersionChanged();
    #endregion
	
	public aspnet_SchemaVersion()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feature", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Feature
	{
		get
		{
			return this._Feature;
		}
		set
		{
			if ((this._Feature != value))
			{
				this.OnFeatureChanging(value);
				this.SendPropertyChanging();
				this._Feature = value;
				this.SendPropertyChanged("Feature");
				this.OnFeatureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompatibleSchemaVersion", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string CompatibleSchemaVersion
	{
		get
		{
			return this._CompatibleSchemaVersion;
		}
		set
		{
			if ((this._CompatibleSchemaVersion != value))
			{
				this.OnCompatibleSchemaVersionChanging(value);
				this.SendPropertyChanging();
				this._CompatibleSchemaVersion = value;
				this.SendPropertyChanged("CompatibleSchemaVersion");
				this.OnCompatibleSchemaVersionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrentVersion", DbType="Bit NOT NULL")]
	public bool IsCurrentVersion
	{
		get
		{
			return this._IsCurrentVersion;
		}
		set
		{
			if ((this._IsCurrentVersion != value))
			{
				this.OnIsCurrentVersionChanging(value);
				this.SendPropertyChanging();
				this._IsCurrentVersion = value;
				this.SendPropertyChanged("IsCurrentVersion");
				this.OnIsCurrentVersionChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ApplicationId;
	
	private System.Guid _UserId;
	
	private string _UserName;
	
	private string _LoweredUserName;
	
	private string _MobileAlias;
	
	private bool _IsAnonymous;
	
	private System.DateTime _LastActivityDate;
	
	private EntityRef<aspnet_Membership> _aspnet_Membership;
	
	private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
	
	private EntityRef<aspnet_Application> _aspnet_Application;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
	
	public aspnet_User()
	{
		this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
		this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
		this._aspnet_Application = default(EntityRef<aspnet_Application>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				if (this._aspnet_Application.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string LoweredUserName
	{
		get
		{
			return this._LoweredUserName;
		}
		set
		{
			if ((this._LoweredUserName != value))
			{
				this.OnLoweredUserNameChanging(value);
				this.SendPropertyChanging();
				this._LoweredUserName = value;
				this.SendPropertyChanged("LoweredUserName");
				this.OnLoweredUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
	public string MobileAlias
	{
		get
		{
			return this._MobileAlias;
		}
		set
		{
			if ((this._MobileAlias != value))
			{
				this.OnMobileAliasChanging(value);
				this.SendPropertyChanging();
				this._MobileAlias = value;
				this.SendPropertyChanged("MobileAlias");
				this.OnMobileAliasChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
	public bool IsAnonymous
	{
		get
		{
			return this._IsAnonymous;
		}
		set
		{
			if ((this._IsAnonymous != value))
			{
				this.OnIsAnonymousChanging(value);
				this.SendPropertyChanging();
				this._IsAnonymous = value;
				this.SendPropertyChanged("IsAnonymous");
				this.OnIsAnonymousChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastActivityDate
	{
		get
		{
			return this._LastActivityDate;
		}
		set
		{
			if ((this._LastActivityDate != value))
			{
				this.OnLastActivityDateChanging(value);
				this.SendPropertyChanging();
				this._LastActivityDate = value;
				this.SendPropertyChanged("LastActivityDate");
				this.OnLastActivityDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
	public aspnet_Membership aspnet_Membership
	{
		get
		{
			return this._aspnet_Membership.Entity;
		}
		set
		{
			aspnet_Membership previousValue = this._aspnet_Membership.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Membership.Entity = null;
					previousValue.aspnet_User = null;
				}
				this._aspnet_Membership.Entity = value;
				if ((value != null))
				{
					value.aspnet_User = this;
				}
				this.SendPropertyChanged("aspnet_Membership");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
	public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
	{
		get
		{
			return this._aspnet_UsersInRoles;
		}
		set
		{
			this._aspnet_UsersInRoles.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
	public aspnet_Application aspnet_Application
	{
		get
		{
			return this._aspnet_Application.Entity;
		}
		set
		{
			aspnet_Application previousValue = this._aspnet_Application.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Application.Entity = null;
					previousValue.aspnet_Users.Remove(this);
				}
				this._aspnet_Application.Entity = value;
				if ((value != null))
				{
					value.aspnet_Users.Add(this);
					this._ApplicationId = value.ApplicationId;
				}
				else
				{
					this._ApplicationId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_Application");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = this;
	}
	
	private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_UsersInRoles")]
public partial class aspnet_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _UserId;
	
	private System.Guid _RoleId;
	
	private EntityRef<aspnet_Role> _aspnet_Role;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
	
	public aspnet_UsersInRole()
	{
		this._aspnet_Role = default(EntityRef<aspnet_Role>);
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid RoleId
	{
		get
		{
			return this._RoleId;
		}
		set
		{
			if ((this._RoleId != value))
			{
				if (this._aspnet_Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoleIdChanging(value);
				this.SendPropertyChanging();
				this._RoleId = value;
				this.SendPropertyChanged("RoleId");
				this.OnRoleIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
	public aspnet_Role aspnet_Role
	{
		get
		{
			return this._aspnet_Role.Entity;
		}
		set
		{
			aspnet_Role previousValue = this._aspnet_Role.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Role.Entity = null;
					previousValue.aspnet_UsersInRoles.Remove(this);
				}
				this._aspnet_Role.Entity = value;
				if ((value != null))
				{
					value.aspnet_UsersInRoles.Add(this);
					this._RoleId = value.RoleId;
				}
				else
				{
					this._RoleId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_Role");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.aspnet_UsersInRoles.Remove(this);
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.aspnet_UsersInRoles.Add(this);
					this._UserId = value.UserId;
				}
				else
				{
					this._UserId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCategory")]
public partial class tblCategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CategoryId;
	
	private string _CategoryName;
	
	private EntitySet<tblSubCategory> _tblSubCategories;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
	
	public tblCategory()
	{
		this._tblSubCategories = new EntitySet<tblSubCategory>(new Action<tblSubCategory>(this.attach_tblSubCategories), new Action<tblSubCategory>(this.detach_tblSubCategories));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CategoryId
	{
		get
		{
			return this._CategoryId;
		}
		set
		{
			if ((this._CategoryId != value))
			{
				this.OnCategoryIdChanging(value);
				this.SendPropertyChanging();
				this._CategoryId = value;
				this.SendPropertyChanged("CategoryId");
				this.OnCategoryIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(50)")]
	public string CategoryName
	{
		get
		{
			return this._CategoryName;
		}
		set
		{
			if ((this._CategoryName != value))
			{
				this.OnCategoryNameChanging(value);
				this.SendPropertyChanging();
				this._CategoryName = value;
				this.SendPropertyChanged("CategoryName");
				this.OnCategoryNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCategory_tblSubCategory", Storage="_tblSubCategories", ThisKey="CategoryId", OtherKey="CategoryId")]
	public EntitySet<tblSubCategory> tblSubCategories
	{
		get
		{
			return this._tblSubCategories;
		}
		set
		{
			this._tblSubCategories.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tblSubCategories(tblSubCategory entity)
	{
		this.SendPropertyChanging();
		entity.tblCategory = this;
	}
	
	private void detach_tblSubCategories(tblSubCategory entity)
	{
		this.SendPropertyChanging();
		entity.tblCategory = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCourt")]
public partial class tblCourt : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CourtId;
	
	private string _CourtName;
	
	private EntitySet<tblDocument> _tblDocuments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourtIdChanging(int value);
    partial void OnCourtIdChanged();
    partial void OnCourtNameChanging(string value);
    partial void OnCourtNameChanged();
    #endregion
	
	public tblCourt()
	{
		this._tblDocuments = new EntitySet<tblDocument>(new Action<tblDocument>(this.attach_tblDocuments), new Action<tblDocument>(this.detach_tblDocuments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourtId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CourtId
	{
		get
		{
			return this._CourtId;
		}
		set
		{
			if ((this._CourtId != value))
			{
				this.OnCourtIdChanging(value);
				this.SendPropertyChanging();
				this._CourtId = value;
				this.SendPropertyChanged("CourtId");
				this.OnCourtIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourtName", DbType="NVarChar(50)")]
	public string CourtName
	{
		get
		{
			return this._CourtName;
		}
		set
		{
			if ((this._CourtName != value))
			{
				this.OnCourtNameChanging(value);
				this.SendPropertyChanging();
				this._CourtName = value;
				this.SendPropertyChanged("CourtName");
				this.OnCourtNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCourt_tblDocument", Storage="_tblDocuments", ThisKey="CourtId", OtherKey="DocCourt")]
	public EntitySet<tblDocument> tblDocuments
	{
		get
		{
			return this._tblDocuments;
		}
		set
		{
			this._tblDocuments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tblDocuments(tblDocument entity)
	{
		this.SendPropertyChanging();
		entity.tblCourt = this;
	}
	
	private void detach_tblDocuments(tblDocument entity)
	{
		this.SendPropertyChanging();
		entity.tblCourt = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblDocSearch")]
public partial class tblDocSearch : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DocId;
	
	private int _SearchId;
	
	private EntityRef<tblDocument> _tblDocument;
	
	private EntityRef<tblSearchWord> _tblSearchWord;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocIdChanging(int value);
    partial void OnDocIdChanged();
    partial void OnSearchIdChanging(int value);
    partial void OnSearchIdChanged();
    #endregion
	
	public tblDocSearch()
	{
		this._tblDocument = default(EntityRef<tblDocument>);
		this._tblSearchWord = default(EntityRef<tblSearchWord>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int DocId
	{
		get
		{
			return this._DocId;
		}
		set
		{
			if ((this._DocId != value))
			{
				if (this._tblDocument.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDocIdChanging(value);
				this.SendPropertyChanging();
				this._DocId = value;
				this.SendPropertyChanged("DocId");
				this.OnDocIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SearchId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SearchId
	{
		get
		{
			return this._SearchId;
		}
		set
		{
			if ((this._SearchId != value))
			{
				if (this._tblSearchWord.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSearchIdChanging(value);
				this.SendPropertyChanging();
				this._SearchId = value;
				this.SendPropertyChanged("SearchId");
				this.OnSearchIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocument_tblDocSearch", Storage="_tblDocument", ThisKey="DocId", OtherKey="DocId", IsForeignKey=true)]
	public tblDocument tblDocument
	{
		get
		{
			return this._tblDocument.Entity;
		}
		set
		{
			tblDocument previousValue = this._tblDocument.Entity;
			if (((previousValue != value) 
						|| (this._tblDocument.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblDocument.Entity = null;
					previousValue.tblDocSearches.Remove(this);
				}
				this._tblDocument.Entity = value;
				if ((value != null))
				{
					value.tblDocSearches.Add(this);
					this._DocId = value.DocId;
				}
				else
				{
					this._DocId = default(int);
				}
				this.SendPropertyChanged("tblDocument");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSearchWord_tblDocSearch", Storage="_tblSearchWord", ThisKey="SearchId", OtherKey="Id", IsForeignKey=true)]
	public tblSearchWord tblSearchWord
	{
		get
		{
			return this._tblSearchWord.Entity;
		}
		set
		{
			tblSearchWord previousValue = this._tblSearchWord.Entity;
			if (((previousValue != value) 
						|| (this._tblSearchWord.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblSearchWord.Entity = null;
					previousValue.tblDocSearches.Remove(this);
				}
				this._tblSearchWord.Entity = value;
				if ((value != null))
				{
					value.tblDocSearches.Add(this);
					this._SearchId = value.Id;
				}
				else
				{
					this._SearchId = default(int);
				}
				this.SendPropertyChanged("tblSearchWord");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblDocument")]
public partial class tblDocument : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DocId;
	
	private string _DocHeadText;
	
	private string _DocNr;
	
	private System.Nullable<int> _Docyear;
	
	private System.Nullable<System.DateTime> _DocStart;
	
	private System.Nullable<System.DateTime> _DocEnd;
	
	private string _DocResume;
	
	private string _DocResult;
	
	private System.Nullable<int> _DocCourt;
	
	private System.Nullable<int> _DocPerson;
	
	private string _DocAttach;
	
	private System.Nullable<System.DateTime> _DocCreated;
	
	private EntitySet<tblDocSearch> _tblDocSearches;
	
	private EntitySet<tblLawDoc> _tblLawDocs;
	
	private EntitySet<tblSubCategory> _tblSubCategories;
	
	private EntitySet<tblUploadDocument> _tblUploadDocuments;
	
	private EntityRef<tblCourt> _tblCourt;
	
	private EntityRef<tblPerson> _tblPerson;
	
	private EntityRef<tblYear> _tblYear;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocIdChanging(int value);
    partial void OnDocIdChanged();
    partial void OnDocHeadTextChanging(string value);
    partial void OnDocHeadTextChanged();
    partial void OnDocNrChanging(string value);
    partial void OnDocNrChanged();
    partial void OnDocyearChanging(System.Nullable<int> value);
    partial void OnDocyearChanged();
    partial void OnDocStartChanging(System.Nullable<System.DateTime> value);
    partial void OnDocStartChanged();
    partial void OnDocEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDocEndChanged();
    partial void OnDocResumeChanging(string value);
    partial void OnDocResumeChanged();
    partial void OnDocResultChanging(string value);
    partial void OnDocResultChanged();
    partial void OnDocCourtChanging(System.Nullable<int> value);
    partial void OnDocCourtChanged();
    partial void OnDocPersonChanging(System.Nullable<int> value);
    partial void OnDocPersonChanged();
    partial void OnDocAttachChanging(string value);
    partial void OnDocAttachChanged();
    partial void OnDocCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDocCreatedChanged();
    #endregion
	
	public tblDocument()
	{
		this._tblDocSearches = new EntitySet<tblDocSearch>(new Action<tblDocSearch>(this.attach_tblDocSearches), new Action<tblDocSearch>(this.detach_tblDocSearches));
		this._tblLawDocs = new EntitySet<tblLawDoc>(new Action<tblLawDoc>(this.attach_tblLawDocs), new Action<tblLawDoc>(this.detach_tblLawDocs));
		this._tblSubCategories = new EntitySet<tblSubCategory>(new Action<tblSubCategory>(this.attach_tblSubCategories), new Action<tblSubCategory>(this.detach_tblSubCategories));
		this._tblUploadDocuments = new EntitySet<tblUploadDocument>(new Action<tblUploadDocument>(this.attach_tblUploadDocuments), new Action<tblUploadDocument>(this.detach_tblUploadDocuments));
		this._tblCourt = default(EntityRef<tblCourt>);
		this._tblPerson = default(EntityRef<tblPerson>);
		this._tblYear = default(EntityRef<tblYear>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DocId
	{
		get
		{
			return this._DocId;
		}
		set
		{
			if ((this._DocId != value))
			{
				this.OnDocIdChanging(value);
				this.SendPropertyChanging();
				this._DocId = value;
				this.SendPropertyChanged("DocId");
				this.OnDocIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocHeadText", DbType="NVarChar(50)")]
	public string DocHeadText
	{
		get
		{
			return this._DocHeadText;
		}
		set
		{
			if ((this._DocHeadText != value))
			{
				this.OnDocHeadTextChanging(value);
				this.SendPropertyChanging();
				this._DocHeadText = value;
				this.SendPropertyChanged("DocHeadText");
				this.OnDocHeadTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocNr", DbType="NVarChar(50)")]
	public string DocNr
	{
		get
		{
			return this._DocNr;
		}
		set
		{
			if ((this._DocNr != value))
			{
				this.OnDocNrChanging(value);
				this.SendPropertyChanging();
				this._DocNr = value;
				this.SendPropertyChanged("DocNr");
				this.OnDocNrChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Docyear", DbType="Int")]
	public System.Nullable<int> Docyear
	{
		get
		{
			return this._Docyear;
		}
		set
		{
			if ((this._Docyear != value))
			{
				if (this._tblYear.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDocyearChanging(value);
				this.SendPropertyChanging();
				this._Docyear = value;
				this.SendPropertyChanged("Docyear");
				this.OnDocyearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocStart", DbType="DateTime")]
	public System.Nullable<System.DateTime> DocStart
	{
		get
		{
			return this._DocStart;
		}
		set
		{
			if ((this._DocStart != value))
			{
				this.OnDocStartChanging(value);
				this.SendPropertyChanging();
				this._DocStart = value;
				this.SendPropertyChanged("DocStart");
				this.OnDocStartChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocEnd", DbType="DateTime")]
	public System.Nullable<System.DateTime> DocEnd
	{
		get
		{
			return this._DocEnd;
		}
		set
		{
			if ((this._DocEnd != value))
			{
				this.OnDocEndChanging(value);
				this.SendPropertyChanging();
				this._DocEnd = value;
				this.SendPropertyChanged("DocEnd");
				this.OnDocEndChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocResume", DbType="NVarChar(MAX)")]
	public string DocResume
	{
		get
		{
			return this._DocResume;
		}
		set
		{
			if ((this._DocResume != value))
			{
				this.OnDocResumeChanging(value);
				this.SendPropertyChanging();
				this._DocResume = value;
				this.SendPropertyChanged("DocResume");
				this.OnDocResumeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocResult", DbType="NVarChar(MAX)")]
	public string DocResult
	{
		get
		{
			return this._DocResult;
		}
		set
		{
			if ((this._DocResult != value))
			{
				this.OnDocResultChanging(value);
				this.SendPropertyChanging();
				this._DocResult = value;
				this.SendPropertyChanged("DocResult");
				this.OnDocResultChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocCourt", DbType="Int")]
	public System.Nullable<int> DocCourt
	{
		get
		{
			return this._DocCourt;
		}
		set
		{
			if ((this._DocCourt != value))
			{
				if (this._tblCourt.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDocCourtChanging(value);
				this.SendPropertyChanging();
				this._DocCourt = value;
				this.SendPropertyChanged("DocCourt");
				this.OnDocCourtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocPerson", DbType="Int")]
	public System.Nullable<int> DocPerson
	{
		get
		{
			return this._DocPerson;
		}
		set
		{
			if ((this._DocPerson != value))
			{
				if (this._tblPerson.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDocPersonChanging(value);
				this.SendPropertyChanging();
				this._DocPerson = value;
				this.SendPropertyChanged("DocPerson");
				this.OnDocPersonChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocAttach", DbType="NVarChar(50)")]
	public string DocAttach
	{
		get
		{
			return this._DocAttach;
		}
		set
		{
			if ((this._DocAttach != value))
			{
				this.OnDocAttachChanging(value);
				this.SendPropertyChanging();
				this._DocAttach = value;
				this.SendPropertyChanged("DocAttach");
				this.OnDocAttachChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocCreated", DbType="DateTime")]
	public System.Nullable<System.DateTime> DocCreated
	{
		get
		{
			return this._DocCreated;
		}
		set
		{
			if ((this._DocCreated != value))
			{
				this.OnDocCreatedChanging(value);
				this.SendPropertyChanging();
				this._DocCreated = value;
				this.SendPropertyChanged("DocCreated");
				this.OnDocCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocument_tblDocSearch", Storage="_tblDocSearches", ThisKey="DocId", OtherKey="DocId")]
	public EntitySet<tblDocSearch> tblDocSearches
	{
		get
		{
			return this._tblDocSearches;
		}
		set
		{
			this._tblDocSearches.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocument_tblLawDoc", Storage="_tblLawDocs", ThisKey="DocId", OtherKey="DocId")]
	public EntitySet<tblLawDoc> tblLawDocs
	{
		get
		{
			return this._tblLawDocs;
		}
		set
		{
			this._tblLawDocs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocument_tblSubCategory", Storage="_tblSubCategories", ThisKey="DocId", OtherKey="DocId")]
	public EntitySet<tblSubCategory> tblSubCategories
	{
		get
		{
			return this._tblSubCategories;
		}
		set
		{
			this._tblSubCategories.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocument_tblUploadDocument", Storage="_tblUploadDocuments", ThisKey="DocId", OtherKey="DocId")]
	public EntitySet<tblUploadDocument> tblUploadDocuments
	{
		get
		{
			return this._tblUploadDocuments;
		}
		set
		{
			this._tblUploadDocuments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCourt_tblDocument", Storage="_tblCourt", ThisKey="DocCourt", OtherKey="CourtId", IsForeignKey=true)]
	public tblCourt tblCourt
	{
		get
		{
			return this._tblCourt.Entity;
		}
		set
		{
			tblCourt previousValue = this._tblCourt.Entity;
			if (((previousValue != value) 
						|| (this._tblCourt.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblCourt.Entity = null;
					previousValue.tblDocuments.Remove(this);
				}
				this._tblCourt.Entity = value;
				if ((value != null))
				{
					value.tblDocuments.Add(this);
					this._DocCourt = value.CourtId;
				}
				else
				{
					this._DocCourt = default(Nullable<int>);
				}
				this.SendPropertyChanged("tblCourt");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPerson_tblDocument", Storage="_tblPerson", ThisKey="DocPerson", OtherKey="PersonId", IsForeignKey=true)]
	public tblPerson tblPerson
	{
		get
		{
			return this._tblPerson.Entity;
		}
		set
		{
			tblPerson previousValue = this._tblPerson.Entity;
			if (((previousValue != value) 
						|| (this._tblPerson.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblPerson.Entity = null;
					previousValue.tblDocuments.Remove(this);
				}
				this._tblPerson.Entity = value;
				if ((value != null))
				{
					value.tblDocuments.Add(this);
					this._DocPerson = value.PersonId;
				}
				else
				{
					this._DocPerson = default(Nullable<int>);
				}
				this.SendPropertyChanged("tblPerson");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblYear_tblDocument", Storage="_tblYear", ThisKey="Docyear", OtherKey="YearId", IsForeignKey=true)]
	public tblYear tblYear
	{
		get
		{
			return this._tblYear.Entity;
		}
		set
		{
			tblYear previousValue = this._tblYear.Entity;
			if (((previousValue != value) 
						|| (this._tblYear.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblYear.Entity = null;
					previousValue.tblDocuments.Remove(this);
				}
				this._tblYear.Entity = value;
				if ((value != null))
				{
					value.tblDocuments.Add(this);
					this._Docyear = value.YearId;
				}
				else
				{
					this._Docyear = default(Nullable<int>);
				}
				this.SendPropertyChanged("tblYear");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tblDocSearches(tblDocSearch entity)
	{
		this.SendPropertyChanging();
		entity.tblDocument = this;
	}
	
	private void detach_tblDocSearches(tblDocSearch entity)
	{
		this.SendPropertyChanging();
		entity.tblDocument = null;
	}
	
	private void attach_tblLawDocs(tblLawDoc entity)
	{
		this.SendPropertyChanging();
		entity.tblDocument = this;
	}
	
	private void detach_tblLawDocs(tblLawDoc entity)
	{
		this.SendPropertyChanging();
		entity.tblDocument = null;
	}
	
	private void attach_tblSubCategories(tblSubCategory entity)
	{
		this.SendPropertyChanging();
		entity.tblDocument = this;
	}
	
	private void detach_tblSubCategories(tblSubCategory entity)
	{
		this.SendPropertyChanging();
		entity.tblDocument = null;
	}
	
	private void attach_tblUploadDocuments(tblUploadDocument entity)
	{
		this.SendPropertyChanging();
		entity.tblDocument = this;
	}
	
	private void detach_tblUploadDocuments(tblUploadDocument entity)
	{
		this.SendPropertyChanging();
		entity.tblDocument = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblLaw")]
public partial class tblLaw : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _LawId;
	
	private string _LawName;
	
	private EntitySet<tblSubLaw> _tblSubLaws;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLawIdChanging(int value);
    partial void OnLawIdChanged();
    partial void OnLawNameChanging(string value);
    partial void OnLawNameChanged();
    #endregion
	
	public tblLaw()
	{
		this._tblSubLaws = new EntitySet<tblSubLaw>(new Action<tblSubLaw>(this.attach_tblSubLaws), new Action<tblSubLaw>(this.detach_tblSubLaws));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LawId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int LawId
	{
		get
		{
			return this._LawId;
		}
		set
		{
			if ((this._LawId != value))
			{
				this.OnLawIdChanging(value);
				this.SendPropertyChanging();
				this._LawId = value;
				this.SendPropertyChanged("LawId");
				this.OnLawIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LawName", DbType="NVarChar(50)")]
	public string LawName
	{
		get
		{
			return this._LawName;
		}
		set
		{
			if ((this._LawName != value))
			{
				this.OnLawNameChanging(value);
				this.SendPropertyChanging();
				this._LawName = value;
				this.SendPropertyChanged("LawName");
				this.OnLawNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLaw_tblSubLaw", Storage="_tblSubLaws", ThisKey="LawId", OtherKey="LawId")]
	public EntitySet<tblSubLaw> tblSubLaws
	{
		get
		{
			return this._tblSubLaws;
		}
		set
		{
			this._tblSubLaws.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tblSubLaws(tblSubLaw entity)
	{
		this.SendPropertyChanging();
		entity.tblLaw = this;
	}
	
	private void detach_tblSubLaws(tblSubLaw entity)
	{
		this.SendPropertyChanging();
		entity.tblLaw = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblLawDoc")]
public partial class tblLawDoc : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DocId;
	
	private int _LawId;
	
	private EntityRef<tblDocument> _tblDocument;
	
	private EntityRef<tblSubLaw> _tblSubLaw;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocIdChanging(int value);
    partial void OnDocIdChanged();
    partial void OnLawIdChanging(int value);
    partial void OnLawIdChanged();
    #endregion
	
	public tblLawDoc()
	{
		this._tblDocument = default(EntityRef<tblDocument>);
		this._tblSubLaw = default(EntityRef<tblSubLaw>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int DocId
	{
		get
		{
			return this._DocId;
		}
		set
		{
			if ((this._DocId != value))
			{
				if (this._tblDocument.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDocIdChanging(value);
				this.SendPropertyChanging();
				this._DocId = value;
				this.SendPropertyChanged("DocId");
				this.OnDocIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LawId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int LawId
	{
		get
		{
			return this._LawId;
		}
		set
		{
			if ((this._LawId != value))
			{
				if (this._tblSubLaw.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLawIdChanging(value);
				this.SendPropertyChanging();
				this._LawId = value;
				this.SendPropertyChanged("LawId");
				this.OnLawIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocument_tblLawDoc", Storage="_tblDocument", ThisKey="DocId", OtherKey="DocId", IsForeignKey=true)]
	public tblDocument tblDocument
	{
		get
		{
			return this._tblDocument.Entity;
		}
		set
		{
			tblDocument previousValue = this._tblDocument.Entity;
			if (((previousValue != value) 
						|| (this._tblDocument.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblDocument.Entity = null;
					previousValue.tblLawDocs.Remove(this);
				}
				this._tblDocument.Entity = value;
				if ((value != null))
				{
					value.tblLawDocs.Add(this);
					this._DocId = value.DocId;
				}
				else
				{
					this._DocId = default(int);
				}
				this.SendPropertyChanged("tblDocument");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSubLaw_tblLawDoc", Storage="_tblSubLaw", ThisKey="LawId", OtherKey="SubLawId", IsForeignKey=true)]
	public tblSubLaw tblSubLaw
	{
		get
		{
			return this._tblSubLaw.Entity;
		}
		set
		{
			tblSubLaw previousValue = this._tblSubLaw.Entity;
			if (((previousValue != value) 
						|| (this._tblSubLaw.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblSubLaw.Entity = null;
					previousValue.tblLawDocs.Remove(this);
				}
				this._tblSubLaw.Entity = value;
				if ((value != null))
				{
					value.tblLawDocs.Add(this);
					this._LawId = value.SubLawId;
				}
				else
				{
					this._LawId = default(int);
				}
				this.SendPropertyChanged("tblSubLaw");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPerson")]
public partial class tblPerson : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PersonId;
	
	private string _PersonName;
	
	private EntitySet<tblDocument> _tblDocuments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIdChanging(int value);
    partial void OnPersonIdChanged();
    partial void OnPersonNameChanging(string value);
    partial void OnPersonNameChanged();
    #endregion
	
	public tblPerson()
	{
		this._tblDocuments = new EntitySet<tblDocument>(new Action<tblDocument>(this.attach_tblDocuments), new Action<tblDocument>(this.detach_tblDocuments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PersonId
	{
		get
		{
			return this._PersonId;
		}
		set
		{
			if ((this._PersonId != value))
			{
				this.OnPersonIdChanging(value);
				this.SendPropertyChanging();
				this._PersonId = value;
				this.SendPropertyChanged("PersonId");
				this.OnPersonIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonName", DbType="NVarChar(50)")]
	public string PersonName
	{
		get
		{
			return this._PersonName;
		}
		set
		{
			if ((this._PersonName != value))
			{
				this.OnPersonNameChanging(value);
				this.SendPropertyChanging();
				this._PersonName = value;
				this.SendPropertyChanged("PersonName");
				this.OnPersonNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPerson_tblDocument", Storage="_tblDocuments", ThisKey="PersonId", OtherKey="DocPerson")]
	public EntitySet<tblDocument> tblDocuments
	{
		get
		{
			return this._tblDocuments;
		}
		set
		{
			this._tblDocuments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tblDocuments(tblDocument entity)
	{
		this.SendPropertyChanging();
		entity.tblPerson = this;
	}
	
	private void detach_tblDocuments(tblDocument entity)
	{
		this.SendPropertyChanging();
		entity.tblPerson = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSearchWord")]
public partial class tblSearchWord : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _SearchName;
	
	private EntitySet<tblDocSearch> _tblDocSearches;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSearchNameChanging(string value);
    partial void OnSearchNameChanged();
    #endregion
	
	public tblSearchWord()
	{
		this._tblDocSearches = new EntitySet<tblDocSearch>(new Action<tblDocSearch>(this.attach_tblDocSearches), new Action<tblDocSearch>(this.detach_tblDocSearches));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SearchName", DbType="NVarChar(50)")]
	public string SearchName
	{
		get
		{
			return this._SearchName;
		}
		set
		{
			if ((this._SearchName != value))
			{
				this.OnSearchNameChanging(value);
				this.SendPropertyChanging();
				this._SearchName = value;
				this.SendPropertyChanged("SearchName");
				this.OnSearchNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSearchWord_tblDocSearch", Storage="_tblDocSearches", ThisKey="Id", OtherKey="SearchId")]
	public EntitySet<tblDocSearch> tblDocSearches
	{
		get
		{
			return this._tblDocSearches;
		}
		set
		{
			this._tblDocSearches.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tblDocSearches(tblDocSearch entity)
	{
		this.SendPropertyChanging();
		entity.tblSearchWord = this;
	}
	
	private void detach_tblDocSearches(tblDocSearch entity)
	{
		this.SendPropertyChanging();
		entity.tblSearchWord = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSubCategory")]
public partial class tblSubCategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CategoryId;
	
	private int _DocId;
	
	private EntityRef<tblCategory> _tblCategory;
	
	private EntityRef<tblDocument> _tblDocument;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnDocIdChanging(int value);
    partial void OnDocIdChanged();
    #endregion
	
	public tblSubCategory()
	{
		this._tblCategory = default(EntityRef<tblCategory>);
		this._tblDocument = default(EntityRef<tblDocument>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CategoryId
	{
		get
		{
			return this._CategoryId;
		}
		set
		{
			if ((this._CategoryId != value))
			{
				if (this._tblCategory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCategoryIdChanging(value);
				this.SendPropertyChanging();
				this._CategoryId = value;
				this.SendPropertyChanged("CategoryId");
				this.OnCategoryIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int DocId
	{
		get
		{
			return this._DocId;
		}
		set
		{
			if ((this._DocId != value))
			{
				if (this._tblDocument.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDocIdChanging(value);
				this.SendPropertyChanging();
				this._DocId = value;
				this.SendPropertyChanged("DocId");
				this.OnDocIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCategory_tblSubCategory", Storage="_tblCategory", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
	public tblCategory tblCategory
	{
		get
		{
			return this._tblCategory.Entity;
		}
		set
		{
			tblCategory previousValue = this._tblCategory.Entity;
			if (((previousValue != value) 
						|| (this._tblCategory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblCategory.Entity = null;
					previousValue.tblSubCategories.Remove(this);
				}
				this._tblCategory.Entity = value;
				if ((value != null))
				{
					value.tblSubCategories.Add(this);
					this._CategoryId = value.CategoryId;
				}
				else
				{
					this._CategoryId = default(int);
				}
				this.SendPropertyChanged("tblCategory");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocument_tblSubCategory", Storage="_tblDocument", ThisKey="DocId", OtherKey="DocId", IsForeignKey=true)]
	public tblDocument tblDocument
	{
		get
		{
			return this._tblDocument.Entity;
		}
		set
		{
			tblDocument previousValue = this._tblDocument.Entity;
			if (((previousValue != value) 
						|| (this._tblDocument.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblDocument.Entity = null;
					previousValue.tblSubCategories.Remove(this);
				}
				this._tblDocument.Entity = value;
				if ((value != null))
				{
					value.tblSubCategories.Add(this);
					this._DocId = value.DocId;
				}
				else
				{
					this._DocId = default(int);
				}
				this.SendPropertyChanged("tblDocument");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSubLaw")]
public partial class tblSubLaw : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SubLawId;
	
	private string _SubLawName;
	
	private System.Nullable<int> _LawId;
	
	private EntitySet<tblLawDoc> _tblLawDocs;
	
	private EntityRef<tblLaw> _tblLaw;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubLawIdChanging(int value);
    partial void OnSubLawIdChanged();
    partial void OnSubLawNameChanging(string value);
    partial void OnSubLawNameChanged();
    partial void OnLawIdChanging(System.Nullable<int> value);
    partial void OnLawIdChanged();
    #endregion
	
	public tblSubLaw()
	{
		this._tblLawDocs = new EntitySet<tblLawDoc>(new Action<tblLawDoc>(this.attach_tblLawDocs), new Action<tblLawDoc>(this.detach_tblLawDocs));
		this._tblLaw = default(EntityRef<tblLaw>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubLawId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SubLawId
	{
		get
		{
			return this._SubLawId;
		}
		set
		{
			if ((this._SubLawId != value))
			{
				this.OnSubLawIdChanging(value);
				this.SendPropertyChanging();
				this._SubLawId = value;
				this.SendPropertyChanged("SubLawId");
				this.OnSubLawIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubLawName", DbType="NVarChar(50)")]
	public string SubLawName
	{
		get
		{
			return this._SubLawName;
		}
		set
		{
			if ((this._SubLawName != value))
			{
				this.OnSubLawNameChanging(value);
				this.SendPropertyChanging();
				this._SubLawName = value;
				this.SendPropertyChanged("SubLawName");
				this.OnSubLawNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LawId", DbType="Int")]
	public System.Nullable<int> LawId
	{
		get
		{
			return this._LawId;
		}
		set
		{
			if ((this._LawId != value))
			{
				if (this._tblLaw.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLawIdChanging(value);
				this.SendPropertyChanging();
				this._LawId = value;
				this.SendPropertyChanged("LawId");
				this.OnLawIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSubLaw_tblLawDoc", Storage="_tblLawDocs", ThisKey="SubLawId", OtherKey="LawId")]
	public EntitySet<tblLawDoc> tblLawDocs
	{
		get
		{
			return this._tblLawDocs;
		}
		set
		{
			this._tblLawDocs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLaw_tblSubLaw", Storage="_tblLaw", ThisKey="LawId", OtherKey="LawId", IsForeignKey=true)]
	public tblLaw tblLaw
	{
		get
		{
			return this._tblLaw.Entity;
		}
		set
		{
			tblLaw previousValue = this._tblLaw.Entity;
			if (((previousValue != value) 
						|| (this._tblLaw.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblLaw.Entity = null;
					previousValue.tblSubLaws.Remove(this);
				}
				this._tblLaw.Entity = value;
				if ((value != null))
				{
					value.tblSubLaws.Add(this);
					this._LawId = value.LawId;
				}
				else
				{
					this._LawId = default(Nullable<int>);
				}
				this.SendPropertyChanged("tblLaw");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tblLawDocs(tblLawDoc entity)
	{
		this.SendPropertyChanging();
		entity.tblSubLaw = this;
	}
	
	private void detach_tblLawDocs(tblLawDoc entity)
	{
		this.SendPropertyChanging();
		entity.tblSubLaw = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUpload")]
public partial class tblUpload : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _FileName;
	
	private string _FileUrl;
	
	private EntitySet<tblUploadDocument> _tblUploadDocuments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileUrlChanging(string value);
    partial void OnFileUrlChanged();
    #endregion
	
	public tblUpload()
	{
		this._tblUploadDocuments = new EntitySet<tblUploadDocument>(new Action<tblUploadDocument>(this.attach_tblUploadDocuments), new Action<tblUploadDocument>(this.detach_tblUploadDocuments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(50)")]
	public string FileName
	{
		get
		{
			return this._FileName;
		}
		set
		{
			if ((this._FileName != value))
			{
				this.OnFileNameChanging(value);
				this.SendPropertyChanging();
				this._FileName = value;
				this.SendPropertyChanged("FileName");
				this.OnFileNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileUrl", DbType="NVarChar(50)")]
	public string FileUrl
	{
		get
		{
			return this._FileUrl;
		}
		set
		{
			if ((this._FileUrl != value))
			{
				this.OnFileUrlChanging(value);
				this.SendPropertyChanging();
				this._FileUrl = value;
				this.SendPropertyChanged("FileUrl");
				this.OnFileUrlChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUpload_tblUploadDocument", Storage="_tblUploadDocuments", ThisKey="Id", OtherKey="FileId")]
	public EntitySet<tblUploadDocument> tblUploadDocuments
	{
		get
		{
			return this._tblUploadDocuments;
		}
		set
		{
			this._tblUploadDocuments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tblUploadDocuments(tblUploadDocument entity)
	{
		this.SendPropertyChanging();
		entity.tblUpload = this;
	}
	
	private void detach_tblUploadDocuments(tblUploadDocument entity)
	{
		this.SendPropertyChanging();
		entity.tblUpload = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUploadDocument")]
public partial class tblUploadDocument : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DocId;
	
	private int _FileId;
	
	private EntityRef<tblDocument> _tblDocument;
	
	private EntityRef<tblUpload> _tblUpload;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocIdChanging(int value);
    partial void OnDocIdChanged();
    partial void OnFileIdChanging(int value);
    partial void OnFileIdChanged();
    #endregion
	
	public tblUploadDocument()
	{
		this._tblDocument = default(EntityRef<tblDocument>);
		this._tblUpload = default(EntityRef<tblUpload>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int DocId
	{
		get
		{
			return this._DocId;
		}
		set
		{
			if ((this._DocId != value))
			{
				if (this._tblDocument.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDocIdChanging(value);
				this.SendPropertyChanging();
				this._DocId = value;
				this.SendPropertyChanged("DocId");
				this.OnDocIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int FileId
	{
		get
		{
			return this._FileId;
		}
		set
		{
			if ((this._FileId != value))
			{
				if (this._tblUpload.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFileIdChanging(value);
				this.SendPropertyChanging();
				this._FileId = value;
				this.SendPropertyChanged("FileId");
				this.OnFileIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocument_tblUploadDocument", Storage="_tblDocument", ThisKey="DocId", OtherKey="DocId", IsForeignKey=true)]
	public tblDocument tblDocument
	{
		get
		{
			return this._tblDocument.Entity;
		}
		set
		{
			tblDocument previousValue = this._tblDocument.Entity;
			if (((previousValue != value) 
						|| (this._tblDocument.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblDocument.Entity = null;
					previousValue.tblUploadDocuments.Remove(this);
				}
				this._tblDocument.Entity = value;
				if ((value != null))
				{
					value.tblUploadDocuments.Add(this);
					this._DocId = value.DocId;
				}
				else
				{
					this._DocId = default(int);
				}
				this.SendPropertyChanged("tblDocument");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUpload_tblUploadDocument", Storage="_tblUpload", ThisKey="FileId", OtherKey="Id", IsForeignKey=true)]
	public tblUpload tblUpload
	{
		get
		{
			return this._tblUpload.Entity;
		}
		set
		{
			tblUpload previousValue = this._tblUpload.Entity;
			if (((previousValue != value) 
						|| (this._tblUpload.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblUpload.Entity = null;
					previousValue.tblUploadDocuments.Remove(this);
				}
				this._tblUpload.Entity = value;
				if ((value != null))
				{
					value.tblUploadDocuments.Add(this);
					this._FileId = value.Id;
				}
				else
				{
					this._FileId = default(int);
				}
				this.SendPropertyChanged("tblUpload");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblYear")]
public partial class tblYear : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _YearId;
	
	private string _YearName;
	
	private EntitySet<tblDocument> _tblDocuments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYearIdChanging(int value);
    partial void OnYearIdChanged();
    partial void OnYearNameChanging(string value);
    partial void OnYearNameChanged();
    #endregion
	
	public tblYear()
	{
		this._tblDocuments = new EntitySet<tblDocument>(new Action<tblDocument>(this.attach_tblDocuments), new Action<tblDocument>(this.detach_tblDocuments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int YearId
	{
		get
		{
			return this._YearId;
		}
		set
		{
			if ((this._YearId != value))
			{
				this.OnYearIdChanging(value);
				this.SendPropertyChanging();
				this._YearId = value;
				this.SendPropertyChanged("YearId");
				this.OnYearIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearName", DbType="NVarChar(50)")]
	public string YearName
	{
		get
		{
			return this._YearName;
		}
		set
		{
			if ((this._YearName != value))
			{
				this.OnYearNameChanging(value);
				this.SendPropertyChanging();
				this._YearName = value;
				this.SendPropertyChanged("YearName");
				this.OnYearNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblYear_tblDocument", Storage="_tblDocuments", ThisKey="YearId", OtherKey="Docyear")]
	public EntitySet<tblDocument> tblDocuments
	{
		get
		{
			return this._tblDocuments;
		}
		set
		{
			this._tblDocuments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tblDocuments(tblDocument entity)
	{
		this.SendPropertyChanging();
		entity.tblYear = this;
	}
	
	private void detach_tblDocuments(tblDocument entity)
	{
		this.SendPropertyChanging();
		entity.tblYear = null;
	}
}
#pragma warning restore 1591
